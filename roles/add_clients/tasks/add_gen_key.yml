---
- name: OpenVPN | Add Clients | Check for existing private key passwords
  delegate_to: localhost
  stat:
    path: "{{ local_creds_folder }}/{{ item }}/{{ openvpn_server_common_name }}_pk_pass.txt"
  become: False
  register: client_pk_passwords_local
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Generate private key passwords
  shell: echo "$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c15)"
  no_log: true
  register: client_pk_passwords
  with_items: "{{ clients_to_add }}"
  when: not client_pk_passwords_local.results[0].stat.exists

- name: OpenVPN | Add Clients | Make local destination
  delegate_to: localhost
  file:
    path: "{{ local_creds_folder }}/{{ item }}/"
    state: directory
  become: False
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Write private key pass phrases
  delegate_to: localhost
  copy:
    content: "{{ item[1].stdout }}"
    dest: "{{ local_creds_folder }}/{{ item[0] }}/{{ openvpn_server_common_name }}_pk_pass.txt"
  no_log: true
  become: False
  with_together:
    - "{{ clients_to_add }}"
    - "{{ client_pk_passwords.results }}"
  when: not client_pk_passwords_local.results[0].stat.exists

- name: OpenVPN | Add Clients | Read private key pass phrases
  delegate_to: localhost
  command: cat "{{ local_creds_folder }}/{{ item }}/{{ openvpn_server_common_name }}_pk_pass.txt"
  no_log: true
  become: False
  register: client_pk_passwords
  with_items: "{{ clients_to_add }}"
  changed_when: false

- name: OpenVPN | Add Clients | Build Clients
  expect:
    command: ./easyrsa build-client-full "{{ item[0] }}" --req-cn "{{ item[0] }}"
    responses:
      'Enter PEM pass phrase:$': "{{ item[1].stdout }}"
      'Verifying - Enter PEM pass phrase:$': "{{ item[1].stdout }}"
      'Enter pass phrase for .*?:$': "{{ ca_password }}"
    chdir: "{{ openvpn_path_easyrsa }}"
    creates: "{{ openvpn_path_keys }}/{{ item[0] }}.key"
  no_log: true
  with_together:
    - "{{ clients_to_add }}"
    - "{{ client_pk_passwords.results }}"

- name: OpenVPN | Add Clients | Make client configuration directory
  file:
    path: "{{ openvpn_path_pki }}/ovpn"
    mode: 0700
    state: directory

- name: OpenVPN | Add Clients | Register CA certificate contents
  command: cat {{ openvpn_ca_cert }}
  no_log: true
  register: openvpn_ca_contents
  changed_when: false

- name: OpenVPN | Add Clients | Register HMAC firewall key contents
  command: cat {{ openvpn_hmac_firewall }}
  no_log: true
  register: openvpn_hmac_firewall_contents
  changed_when: false

- name: OpenVPN | Add Clients | Register client key contents
  command: cat "{{ openvpn_path_keys }}/{{ item }}.key"
  with_items: "{{ clients_to_add }}"
  no_log: true
  register: openvpn_client_keys
  changed_when: false

- name: OpenVPN | Add Clients | Register client certificate contents
  command: cat "{{ openvpn_path_certs }}/{{ item }}.crt"
  with_items: "{{ clients_to_add }}"
  no_log: true
  register: openvpn_client_certs
  changed_when: false

- name: OpenVPN | Add Clients | Generate TLS-CRYPT V2
  shell: >
    openvpn --tls-crypt-v2 {{ openvpn_tls_crypt }}
    --genkey tls-crypt-v2-client {{ openvpn_path_keys }}/tls-crypt-{{ item[0] }}.pem
  args:
    creates: "{{ openvpn_path_keys }}/tls-crypt-{{ item[0] }}.pem"
  no_log: true
  with_together:
    - "{{ clients_to_add }}"
  tags:
    - skip_ansible_lint

- name: OpenVPN | Add Clients | Register tls-crypt-v2 contents
  command: cat "{{ openvpn_path_keys }}/tls-crypt-{{ item }}.pem"
  with_items: "{{ clients_to_add }}"
  no_log: true
  register: openvpn_client_tls_crypt
  changed_when: false

- name: OpenVPN | Add Clients | Build client configs (.ovpn files; pki embedded)
  template:
    src: client_pki_embedded.ovpn.j2
    dest: "{{ openvpn_path_pki }}/ovpn/{{ item[0] }}-pki-embedded.ovpn"
    mode: 0400
  no_log: true
  with_together:
    - "{{ clients_to_add }}"
    - "{{ openvpn_client_certs.results }}"
    - "{{ openvpn_client_keys.results }}"
    - "{{ openvpn_client_tls_crypt.results }}"

- name: OpenVPN | Add Clients | Build client configs (.ovpn files; pki external files)
  template:
    src: client_pki_files.ovpn.j2
    dest: "{{ openvpn_path_pki }}/ovpn/{{ item }}-pki-files.ovpn"
    mode: 0400
  no_log: true
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Get list of clients with ccd defined
  set_fact:
    valid_clients_with_ccd: "{{ valid_clients | selectattr('ccd', 'defined') | selectattr('name', 'defined') | list }}"

- name: OpenVPN | Add Clients | Build ccd configs
  template:
    src: client_ccd.j2
    dest: "{{ openvpn_path_ccd }}/{{ item.name }}"
    mode: 0644
  with_items: "{{ valid_clients_with_ccd }}"

- name: OpenVPN | Add Clients | Build client configs (.ovpn files; external pkcs12)
  template:
    src: client_pkcs12.ovpn.j2
    dest: "{{ openvpn_path_pki }}/ovpn/{{ item }}-pkcs12.ovpn"
    mode: 0400
  no_log: true
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Generate PKCS#12
  shell: >
    openssl pkcs12 -export
    -in "{{ openvpn_path_certs }}/{{ item[0] }}.crt"
    -inkey "{{ openvpn_path_keys }}/{{ item[0] }}.key"
    -certfile {{ openvpn_ca_cert }}
    -name "{{ item[0] }}"
    -out "{{ openvpn_path_pki }}/ovpn/{{ item[0] }}.p12"
    -passin pass:{{ item[1].stdout }}
    -passout pass:{{ item[1].stdout }}
  args:
    creates: "{{ openvpn_path_pki }}/ovpn/{{ item[0] }}.p12"
  no_log: true
  with_together:
    - "{{ clients_to_add }}"
    - "{{ client_pk_passwords.results }}"
  tags:
    - skip_ansible_lint

#store to local
- name: OpenVPN | Add Clients | Get .ovpn files (*-pki-embedded.ovpn)
  fetch:
    src: "{{ openvpn_path_pki }}/ovpn/{{ item }}-pki-embedded.ovpn"
    dest: "{{ local_creds_folder }}/{{ item }}/"
    flat: yes
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Get .ovpn files (*-pki-files.ovpn)
  fetch:
    src: "{{ openvpn_path_pki }}/ovpn/{{ item }}-pki-files.ovpn"
    dest: "{{ local_creds_folder }}/{{ item }}/"
    flat: yes
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Get .ovpn files (*-pkcs12.ovpn)
  fetch:
    src: "{{ openvpn_path_pki }}/ovpn/{{ item }}-pkcs12.ovpn"
    dest: "{{ local_creds_folder }}/{{ item }}/"
    flat: yes
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Get client PKCS#12 files
  fetch:
    src: "{{ openvpn_path_pki }}/ovpn/{{ item }}.p12"
    dest: "{{ local_creds_folder }}/{{ item }}/"
    flat: yes
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Get client CA cert
  fetch:
    src: "{{ openvpn_ca_cert }}"
    dest: "{{ local_creds_folder }}/{{ item }}/"
    flat: yes
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Get client certs
  fetch:
    src: "{{ openvpn_path_certs }}/{{ item }}.crt"
    dest: "{{ local_creds_folder }}/{{ item }}/"
    flat: yes
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Get client keys
  fetch:
    src: "{{ openvpn_path_keys }}/{{ item }}.key"
    dest: "{{ local_creds_folder }}/{{ item }}/"
    flat: yes
  with_items:
    - "{{ clients_to_add }}"

- name: OpenVPN | Add Clients | Clear bash history
  shell: cat /dev/null > ~/.bash_history && history -c
  args:
    executable: /bin/bash
  ignore_errors: true
  changed_when: false
